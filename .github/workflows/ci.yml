name: CI

on:
    push:
        branches:
            - main
    pull_request_target:

jobs:
    validate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Validate SQF
              run: python3 tools/sqf_validator.py
            - name: Validate Config
              run: python3 tools/config_style_checker.py
            - name: Check for BOM
              uses: arma-actions/bom-check@master
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Lint (sqflint)
              uses: arma-actions/sqflint@master
              continue-on-error: true # No failure due to many false-positives
    hemtt:
        name: Build with HEMTT
        permissions: write-all
        runs-on: ubuntu-latest
        needs: [validate, lint]
        steps:
            - name: Checkout repo PR
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
            - name: Setup Docker
              uses: docker/setup-buildx-action@v1
              with:
                install: true
            - name: Build Extensions for Linux
              run: |
                  docker pull x1unix/go-mingw:1.20
                  docker build -t rtf42/build-a3go:linux-so -f ${{ github.workspace }}/extensions/Dockerfile.build .
                  cd extensions
                  for d in */ ; do
                      d=${d::-1}
                      cd $d
                      echo "Building $d"
                      docker run --rm -v ${PWD}:/go/work -w /go/work -e GOARCH=386 -e CGO_ENABLED=1 x1unix/go-mingw:1.20 go build -o "/home/runner/work/rtf42/rtf42/"$d".dll" -buildmode=c-shared -ldflags '-w -s'
                      docker run --rm -v ${PWD}:/go/work -w /go/work -e GOARCH=amd64 -e CGO_ENABLED=1 x1unix/go-mingw:1.20  go build -o "/home/runner/work/rtf42/rtf42/"$d"_x64.dll" -buildmode=c-shared -ldflags '-w -s'
                      docker run --rm -v ${PWD}:/app -e GOOS=linux -e GOARCH=amd64 -e CGO_ENABLED=1 -e CC=gcc rtf42/build-a3go:linux-so go build -o "/home/runner/work/rtf42/rtf42/"$d"_x64.so" -linkshared -ldflags '-w -s'
                      docker run --rm -v ${PWD}:/app -e GOOS=linux -e GOARCH=386 -e CGO_ENABLED=1 -e CC=gcc rtf42/build-a3go:linux-so go build -o "/home/runner/work/rtf42/rtf42/"$d".so" -linkshared -ldflags '-w -s'
                      cd ..
                  done
            - name: Download FFMPEG
              run: | 
                wget https://github.com/GyanD/codexffmpeg/releases/download/6.1/ffmpeg-6.1-essentials_build.7z
                7z x ffmpeg-6.1-essentials_build.7z
                mv ffmpeg-6.1-essentials_build/bin/ffmpeg.exe .
                rm -rf ffmpeg-6.1-essentials_build
            - name: Setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 18
            - name: Install translator
              run: cd extras/translator && npm install
            - name: Fill .env file with secrets
              run: echo -e "TOLGEE_API_KEY=${{ secrets.TOLGEE_API_KEY }}\nTOLGEE_URL=${{ secrets.TOLGEE_URL }}" >> extras/translator/.env
            - name: Run translator
              run: cd extras/translator && npm start
            - name: Setup HEMTT
              uses: arma-actions/hemtt@v1
            - name: Run HEMTT build
              run: hemtt build
            - name: Rename build folder
              run: mv .hemttout/build .hemttout/@rtf42
            - name: Upload Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rtf42-${{ github.sha }}
                  path: .hemttout/@*
            - name: Delete extension artifact
              uses : actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const artifacts = await github.rest.actions.listArtifactsForRepo({
                          owner: context.repo.owner,
                          repo: context.repo.repo
                      });
                      for (const artifact of artifacts.data.artifacts) {
                          if (artifact.name.startsWith("rtf42-extensions")) {
                              await github.rest.actions.deleteArtifact({
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  artifact_id: artifact.id
                              });
                          }
                      }
