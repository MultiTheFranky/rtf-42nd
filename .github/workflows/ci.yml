name: CI

on:
    push:
        branches:
            - main
    pull_request_target:

jobs:
    validate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Validate SQF
              run: python3 tools/sqf_validator.py
            - name: Validate Config
              run: python3 tools/config_style_checker.py
            - name: Check for BOM
              uses: arma-actions/bom-check@master
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Lint (sqflint)
              uses: arma-actions/sqflint@master
              continue-on-error: true # No failure due to many false-positives
    windows-extensions:
        name: Build Extensions for Windows
        runs-on: windows-latest
        needs: [validate, lint]
        steps:
            - name: Checkout repo PR
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
            - name: Set up MinGW X86
              uses: egor-tensin/setup-mingw@v2
              with:
                  platform: x86
                  version: 12.2.0
            - name: Setup GO
              uses: actions/setup-go@v2
              with:
                  go-version: 1.21.5
            - name: Build Extensions for Windows x86 (Powershell script)
              run: |
                  cd extensions
                  $BasePath = D:\a\rtf42\rtf42\extensions
                  $BuildPath = Split-Path -Parent $BasePath
                  Get-ChildItem -Path . -Directory | ForEach-Object {
                      cd $_.Name
                      echo "Building " $_.Name
                      $ENV:GOARCH = 386
                      $ENV:CGO_ENABLED = 1
                      $ENV:GOOS = "windows"
                      go build -o $BuildPath\$_.dll -buildmode=c-shared index.go
                      cd ..
                  }
            - name: Set up MinGW X64
              uses: egor-tensin/setup-mingw@v2
              with:
                  platform: x64
                  version: 12.2.0
            - name: Build Extensions for Windows x64
              run: |
                  cd extensions
                  $BasePath = D:\a\rtf42\rtf42\extensions
                  $BuildPath = Split-Path -Parent $BasePath
                  Get-ChildItem -Path . -Directory | ForEach-Object {
                      cd $_.Name
                      echo "Building " $_.Name
                      $ENV:GOARCH = amd64
                      $ENV:CGO_ENABLED = 1
                      $ENV:GOOS = "windows"
                      go build -o $BuildPath\$_.dll -buildmode=c-shared index.go
                      cd ..
                  }
            - name: Export Extensions
              uses: actions/upload-artifact@v2
              with:
                  name: rtf42-extensions-${{ github.sha }}
                  path: ./*.dll
    linux-extensions:
        name: Build Extensions for Linux
        runs-on: ubuntu-latest
        needs: [validate, lint]
        steps:
            - name: Checkout repo PR
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
            - name: Setup GCC X86
              uses: egor-tensin/setup-gcc@v1
              with:
                version: latest
                platform: x86
            - name: Setup GO
              uses: actions/setup-go@v2
              with:
                  go-version: 1.21.5
            - name: Install libasound2-dev
              run: sudo apt-get install libasound2-dev
            - name: Build Extensions for Linux x86
              run: |
                  cd extensions
                  for d in */ ; do
                      cd $d
                      echo "Building $d"
                      CGO_ENABLED=1 GOOS=linux GOARCH=386 go build -o ../../$d".so" -buildmode=c-shared index.go
                      cd ..
                  done
            - name: Setup GCC X64
              uses: egor-tensin/setup-gcc@v1
              with:
                version: latest
                platform: x64
            - name: Build Extensions for Linux x64
              run: |
                    cd extensions
                    for d in */ ; do
                        cd $d
                        echo "Building $d"
                        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ../../$d"_x64.so" -buildmode=c-shared index.go
                        cd ..
                    done
            - name: Export Extensions
              uses: actions/upload-artifact@v2
              with:
                  name: rtf42-extensions-${{ github.sha }}
                  path: ./*.so

    hemtt:
        name: Build with HEMTT
        runs-on: ubuntu-latest
        needs: [validate, lint, windows-extensions, linux-extensions]
        steps:
            - name: Checkout repo PR
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
            - name: Download Extensions
              uses: actions/download-artifact@v2
              with:
                  name: rtf42-extensions-${{ github.sha }}
                  path: .
            - name: Download FFMPEG for Windows
              run: | 
                wget https://github.com/GyanD/codexffmpeg/releases/download/6.1/ffmpeg-6.1-essentials_build.7z
                7z x ffmpeg-6.1-essentials_build.7z
                mv ffmpeg-6.1-essentials_build/bin/ffmpeg.exe .
                rm -rf ffmpeg-6.1-essentials_build
            - name: Download FFMPEG for Linux
              run: | 
                wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
                tar -xf ffmpeg-release-amd64-static.tar.xz
                mv ffmpeg-4.4-amd64-static ffmpeg
                rm ffmpeg-release-amd64-static.tar.xz
            - name: Setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 18
            - name: Install translator
              run: cd extras/translator && npm install
            - name: Fill .env file with secrets
              run: echo -e "TOLGEE_API_KEY=${{ secrets.TOLGEE_API_KEY }}\nTOLGEE_URL=${{ secrets.TOLGEE_URL }}" >> extras/translator/.env
            - name: Run translator
              run: cd extras/translator && npm start
            - name: Setup HEMTT
              uses: arma-actions/hemtt@v1
            - name: Run HEMTT build
              run: hemtt build
            - name: Rename build folder
              run: mv .hemttout/build .hemttout/@rtf42
            - name: Upload Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: rtf42-${{ github.sha }}
                  path: .hemttout/@*
