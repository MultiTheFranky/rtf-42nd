name: "Main Workflow"

permissions:
    contents: write

on:
    push:
        branches:
            - "main"

concurrency:
    group: "${{ github.actor }} - ${{github.ref}} - main"
    cancel-in-progress: true

jobs:
    validate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Validate SQF
              run: python3 tools/sqf_validator.py
            - name: Validate Config
              run: python3 tools/config_style_checker.py
            - name: Check for BOM
              uses: arma-actions/bom-check@master
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Lint (sqflint)
              uses: arma-actions/sqflint@master
              continue-on-error: true # No failure due to many false-positives
    release:
        name: BETA Release
        permissions: write-all
        runs-on: ubuntu-latest
        if: github.actor != 'kodiakhq[bot]'
        needs: [validate, lint]
        steps:
              - name: Checkout repo
                uses: actions/checkout@v4
              - name: Setup Docker
                uses: docker/setup-buildx-action@v3
                with:
                    install: true
                    driver: docker
              - name: Build Extensions
                run: |
                    cd extensions
                    docker build -t rtf42/build-a3go:windows-so -f ${{ github.workspace }}/extensions/Dockerfile_windows.build .
                    docker build -t rtf42/build-a3go:linux-so -f ${{ github.workspace }}/extensions/Dockerfile_linux_x64.build .
                    for d in */ ; do
                        d=${d::-1}
                        if [ "$d" == "internal" ]; then
                            continue
                        fi
                        echo "Building $d"
                        docker run --rm -v ${{ github.workspace }}/extensions:/go/work -w /go/work -e GOARCH=amd64 -e CGO_ENABLED=1 rtf42/build-a3go:windows-so  go build -o "./${d}_x64.dll" -buildmode=c-shared -ldflags '-w -s' "./$d"
                        docker run --rm -v ${{ github.workspace }}/extensions:/app -e GOOS=linux -e GOARCH=amd64 -e CGO_ENABLED=1 -e CC=gcc rtf42/build-a3go:linux-so go build -o "./${d}_x64.so" -linkshared -ldflags '-w -s' "./$d"
                        mv ${d}_x64.dll ${d}_x64.so ..
                    done
              - name: Download FFMPEG
                run: |
                    wget https://github.com/GyanD/codexffmpeg/releases/download/6.1/ffmpeg-6.1-essentials_build.7z
                    7z x ffmpeg-6.1-essentials_build.7z
                    mv ffmpeg-6.1-essentials_build/bin/ffmpeg.exe .
                    rm -rf ffmpeg-6.1-essentials_build
                    rm ffmpeg-6.1-essentials_build.7z
              - name: Setup node
                uses: actions/setup-node@v4
                with:
                    node-version: 18
              - name: Install translator
                run: cd tools/translator && npm install
              - name: Fill .env file with secrets
                run: echo -e "TOLGEE_API_KEY=${{ secrets.TOLGEE_API_KEY }}\nTOLGEE_URL=${{ secrets.TOLGEE_URL }}" >> tools/translator/.env
              - name: Run translator
                run: cd tools/translator && npm start
              - name: Execute version generator
                run: |
                  cd ${{ github.workspace }}/tools/version_generator
                  npm install
                  VERSION=$(node index.js --beta)
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
              - name: Setup HEMTT
                uses: arma-actions/hemtt@v1
              - name: Run HEMTT release
                run: hemtt release
              - name: Rename build folder
                run: mv ${{ github.workspace }}/releases/rtf42-latest.zip ${{ github.workspace }}/releases/@rtf42-${{env.VERSION}}.zip
              - name: Upload Artifact
                uses: actions/upload-artifact@v4
                with:
                    name: rtf42-${{ env.VERSION }}
                    path: ${{ github.workspace }}/releases/@rtf42-${{env.VERSION}}.zip
              - uses: "marvinpinto/action-automatic-releases@latest"
                id: "automatic_releases"
                with:
                    repo_token: "${{ secrets.GITHUB_TOKEN }}"
                    automatic_release_tag: "${{ env.VERSION }}"
                    prerelease: true
                    title: "Release ${{ env.VERSION }}"
              - name: Upload asset
                uses: shogo82148/actions-upload-release-asset@v1
                with:
                    upload_url: ${{ steps.automatic_releases.outputs.upload_url }}
                    asset_path: ${{ github.workspace }}/releases/@rtf42-${{env.VERSION}}.zip
                    asset_content_type: application/zip
                continue-on-error: true
              - name: PR to merge version to main branch
                uses: peter-evans/create-pull-request@v5
                with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  commit-message: "Update version to ${{ env.VERSION }}"
                  title: "Update version to ${{ env.VERSION }}"
                  body: "Update version to ${{ env.VERSION }}"
                  branch: "version-${{ env.VERSION }}"
                  base: "main"
                  branch-suffix: random
                  delete-branch: true
                  labels: |
                      automerge
                      automated pr
