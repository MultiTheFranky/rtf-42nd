name: "RELEASE"

permissions:
    contents: write

on:
    release:
        types: [published]

jobs:
    validate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Validate SQF
              run: python3 tools/sqf_validator.py
            - name: Validate Config
              run: python3 tools/config_style_checker.py
            - name: Check for BOM
              uses: arma-actions/bom-check@master
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Lint (sqflint)
              uses: arma-actions/sqflint@master
              continue-on-error: true # No failure due to many false-positives
    windows-extensions:
      name: Build Extensions for Windows
      runs-on: windows-latest
      needs: [validate, lint]
      steps:
          - name: Checkout repo PR
            uses: actions/checkout@v4
            with:
                ref: ${{ github.sha }}
          - name: Set up MinGW X86
            uses: egor-tensin/setup-mingw@v2
            with:
                platform: x86
                version: 12.2.0
          - name: Setup GO
            uses: actions/setup-go@v4
            with:
                go-version: 1.21.5
                cache-dependency-path: extensions\go.sum
          - name: Build Extensions for Windows x86
            run: |
                Get-ChildItem -Path ${{ github.workspace }}\extensions -Directory | ForEach-Object {
                    cd "${{ github.workspace }}\extensions\$($_.Name)"
                    $ENV:GOARCH = 386
                    $ENV:CGO_ENABLED = 1
                    $ENV:GOOS = "windows"
                    go build -o "${{ github.workspace }}\$($_.Name).dll" -buildmode=c-shared index.go
                    cd ..
                }
                dir ${{ github.workspace }}
          - name: Export Extensions
            uses: actions/upload-artifact@v4
            with:
                name: rtf42-extensions-${{ github.sha }}
                path: ${{ github.workspace }}\*.dll
    windows-extensions-x64:
        name: Build Extensions for Windows x64
        runs-on: windows-latest
        needs: [validate, lint]
        steps:
            - name: Checkout repo PR
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.sha }}
            - name: Set up MinGW X64
              uses: egor-tensin/setup-mingw@v2
              with:
                  platform: x64
                  version: 12.2.0
            - name: Setup GO
              uses: actions/setup-go@v4
              with:
                  go-version: 1.21.5
                  cache-dependency-path: extensions\go.sum
            - name: Build Extensions for Windows x64
              run: |
                  Get-ChildItem -Path ${{ github.workspace }}\extensions -Directory | ForEach-Object {
                      cd "${{ github.workspace }}\extensions\$($_.Name)"
                      $ENV:GOARCH = "amd64"
                      $ENV:CGO_ENABLED = 1
                      $ENV:GOOS = "windows"
                      go build -o "${{ github.workspace }}\$($_.Name)_x64.dll" -buildmode=c-shared index.go
                      cd ..
                  }
                  dir ${{ github.workspace }}
            - name: Export Extensions
              uses: actions/upload-artifact@v4
              with:
                  name: rtf42-extensions-${{ github.sha }}
                  path: ${{ github.workspace }}\*.dll
    linux-extensions:
        name: Build Extensions for Linux
        runs-on: ubuntu-latest
        needs: [validate, lint]
        steps:
            - name: Checkout repo PR
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.sha }}
            - name: Setup GCC X86
              uses: egor-tensin/setup-gcc@v1
              with:
                version: latest
                platform: x86
            - name: Setup GO
              uses: actions/setup-go@v4
              with:
                  go-version: 1.21.5
                  cache-dependency-path: ${{ github.workspace }}/extensions/go.sum
            - name: Build Extensions for Linux x86
              run: |
                  cd extensions
                  for d in */ ; do
                      d=${d::-1}
                      if [ $d = "playmusic" ]; then
                          continue
                      fi
                      cd $d
                      echo "Building $d"
                      CGO_ENABLED=1 GOOS=linux GOARCH=386 go build -o "/home/runner/work/rtf42/rtf42/"$d".so" -buildmode=c-shared index.go
                      cd ..
                  done
            - name: Setup GCC X64
              uses: egor-tensin/setup-gcc@v1
              with:
                version: latest
                platform: x64
            - name: Build Extensions for Linux x64
              run: |
                    cd extensions
                    for d in */ ; do
                        d=${d::-1}
                        if [ $d = "playmusic" ]; then
                            continue
                        fi
                        cd $d
                        echo "Building $d"
                        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o "/home/runner/work/rtf42/rtf42/"$d"_x64.so" -buildmode=c-shared index.go
                        cd ..
                    done
                    ls -la /home/runner/work/rtf42/rtf42/
            - name: Export Extensions
              uses: actions/upload-artifact@v4
              with:
                  name: rtf42-extensions-${{ github.sha }}
                  path: /home/runner/work/rtf42/rtf42/*.so
    hemtt:
        name: Build with HEMTT
        runs-on: ubuntu-latest
        needs: [validate, lint, windows-extensions, windows-extensions-x64, linux-extensions]
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4
            - name: Download Extensions
              uses: actions/download-artifact@v4
              with:
                  name: rtf42-extensions-${{ github.sha }}
            - name: Download FFMPEG
              run: | 
                wget https://github.com/GyanD/codexffmpeg/releases/download/6.1/ffmpeg-6.1-essentials_build.7z
                7z x ffmpeg-6.1-essentials_build.7z
                mv ffmpeg-6.1-essentials_build/bin/ffmpeg.exe .
                rm -rf ffmpeg-6.1-essentials_build
                rm ffmpeg-6.1-essentials_build.7z
            - name: Setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 18
            - name: Install translator
              run: cd extras/translator && npm install
            - name: Fill .env file with secrets
              run: echo -e "TOLGEE_API_KEY=${{ secrets.TOLGEE_API_KEY }}\nTOLGEE_URL=${{ secrets.TOLGEE_URL }}" >> extras/translator/.env
            - name: Run translator
              run: cd extras/translator && npm start
            - name: Setup HEMTT
              uses: arma-actions/hemtt@v1
            - name: Run HEMTT release
              run: hemtt release
            - name: Rename build folder
              run: mv release/rtf42-latest.zip release/@rtf42.zip
            - name: Upload Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rtf42-${{ github.sha }}
                  path: release/@rtf42.zip
            - name: Upload asset
              uses: shogo82148/actions-upload-release-asset@v1
              with:
                  upload_url: ${{ github.event.release.upload_url }}
                  asset_path: release/@rtf42.zip
                  asset_content_type: application/zip
              continue-on-error: true

            - name: Setup steamcmd
              id: steamcmd
              uses: CyberAndrii/setup-steamcmd@v1

            - name: Generate auth code
              id: generate
              uses: CyberAndrii/steam-totp@v1
              with:
                  shared_secret: ${{ secrets.STEAM_SHARE_SECRET }}
              continue-on-error: true

            - name: Unzip builded mod
              run: unzip -o ${{ steps.build.outputs.zip_path }} -d ${{ steps.build.outputs.release_path }}
              continue-on-error: true

            - name: Upload mod
              uses: MultiTheFranky/action-release-to-steam-ws@0.0.2
              with:
                  steamcmd_path: ${{ steps.steamcmd.outputs.directory }}
                  file_id: "${{ secrets.MOD_ID }}"
                  username: "${{ secrets.STEAM_USERNAME }}"
                  password: "${{ secrets.STEAM_PASSWORD }}"
                  otp: "${{ steps.generate.outputs.code }}"
                  path: "${{ steps.build.outputs.release_path }}/@${{ steps.build.outputs.mod_name }}"
                  name: "${{ steps.build.outputs.mod_name }}"
                  change_notes_title: "${{ github.event.release.name }}"
                  change_notes: "${{ github.event.release.body }}"
              continue-on-error: true
            - name: Delete extension artifact
              uses : actions/github-script@v4
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const artifacts = await github.actions.listArtifactsForRepo({
                          owner: context.repo.owner,
                          repo: context.repo.repo
                      });
                      for (const artifact of artifacts.data.artifacts) {
                          if (artifact.name.startsWith("rtf42-extensions")) {
                              await github.actions.deleteArtifact({
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  artifact_id: artifact.id
                              });
                          }
                      }
