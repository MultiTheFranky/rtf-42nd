name: "RELEASE"

permissions:
    contents: write

on:
    push:
        tags:
            - "v*"

concurrency:
    group: "release"
    cancel-in-progress: true

jobs:
    validate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Validate SQF
              run: python3 tools/sqf_validator.py
            - name: Validate Config
              run: python3 tools/config_style_checker.py
            - name: Check for BOM
              uses: arma-actions/bom-check@master
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the source code
              uses: actions/checkout@master
            - name: Lint (sqflint)
              uses: arma-actions/sqflint@master
              continue-on-error: true # No failure due to many false-positives
    hemtt:
        name: Build with HEMTT
        permissions: write-all
        runs-on: ubuntu-latest
        needs: [validate, lint]
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4
            - name: Setup Docker
              uses: docker/setup-buildx-action@v3
              with:
                install: true
                driver: docker
            - name: Build Extensions
              run: |
                  cd extensions
                  docker build -t rtf42/build-a3go:windows-so -f ${{ github.workspace }}/extensions/Dockerfile_windows.build .
                  docker build -t rtf42/build-a3go:linux-so -f ${{ github.workspace }}/extensions/Dockerfile_linux_x64.build .
                  for d in */ ; do
                      d=${d::-1}
                      if [ "$d" == "internal" ]; then
                          continue
                      fi
                      echo "Building $d"
                      docker run --rm -v ${{ github.workspace }}/extensions:/go/work -w /go/work -e GOARCH=amd64 -e CGO_ENABLED=1 rtf42/build-a3go:windows-so  go build -o "./${d}_x64.dll" -buildmode=c-shared -ldflags '-w -s' "./$d"
                      docker run --rm -v ${{ github.workspace }}/extensions:/app -e GOOS=linux -e GOARCH=amd64 -e CGO_ENABLED=1 -e CC=gcc rtf42/build-a3go:linux-so go build -o "./${d}_x64.so" -linkshared -ldflags '-w -s' "./$d"
                      mv ${d}_x64.dll ${d}_x64.so ..
                  done
            - name: Download FFMPEG
              run: |
                wget https://github.com/GyanD/codexffmpeg/releases/download/6.1/ffmpeg-6.1-essentials_build.7z
                7z x ffmpeg-6.1-essentials_build.7z
                mv ffmpeg-6.1-essentials_build/bin/ffmpeg.exe .
                rm -rf ffmpeg-6.1-essentials_build
                rm ffmpeg-6.1-essentials_build.7z
            - name: Setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 18
            - name: Install translator
              run: cd tools/translator && npm install
            - name: Fill .env file with secrets
              run: echo -e "TOLGEE_API_KEY=${{ secrets.TOLGEE_API_KEY }}\nTOLGEE_URL=${{ secrets.TOLGEE_URL }}" >> tools/translator/.env
            - name: Run translator
              run: cd tools/translator && npm start
            - name: Execute version generator
              if: ${{ contains(github.ref_name,'rc') == false }}
              run: |
                cd ${{github.workspace}}/tools/version_generator
                npm install
                VERSION=$(node index.js )
                echo "VERSION=$VERSION" >> $GITHUB_ENV
            - name: Execute version generator
              if: ${{ contains(github.ref_name,'rc') == true }}
              run: |
                  cd ${{github.workspace}}/tools/version_generator
                  npm install
                  VERSION=$(node index.js --beta)
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
            - name: Setup HEMTT
              uses: arma-actions/hemtt@v1
            - name: Run HEMTT release
              run: hemtt release
            - name: Rename build folder
              run: mv ${{ github.workspace }}/releases/rtf42-latest.zip ${{ github.workspace }}/releases/@rtf42.zip
            - name: Upload Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: rtf42-${{ env.VERSION }}
                  path: ${{ github.workspace }}/releases/@rtf42.zip
            - name: Setup steamcmd
              id: steamcmd
              uses: CyberAndrii/setup-steamcmd@v1

            - name: Generate auth code
              id: generate
              uses: CyberAndrii/steam-totp@v1
              with:
                  shared_secret: ${{ secrets.STEAM_SHARE_SECRET }}
              continue-on-error: true

            - name: Unzip builded mod
              run: unzip -o ${{ github.workspace }}/releases/@rtf42.zip -d ${{ github.workspace }}/releases
              continue-on-error: true

            - name: Upload mod
              uses: MultiTheFranky/action-release-to-steam-ws@0.0.2
              if: ${{ contains(github.ref_name,'rc') == false }}
              with:
                  steamcmd_path: ${{ steps.steamcmd.outputs.directory }}
                  file_id: "${{ secrets.MOD_ID }}"
                  username: "${{ secrets.STEAM_USERNAME }}"
                  password: "${{ secrets.STEAM_PASSWORD }}"
                  otp: "${{ steps.generate.outputs.code }}"
                  path: "${{ github.workspace }}/releases/@rtf42"
                  name: "rtf42"
                  change_notes_title: "${{ github.event.release.name }}"
                  change_notes: "${{ github.event.release.body }}"
              continue-on-error: true

            - name: Upload beta mod
              uses: MultiTheFranky/action-release-to-steam-ws@0.0.2
              if: ${{ contains(github.ref_name,'rc') == true }}
              with:
                  steamcmd_path: ${{ steps.steamcmd.outputs.directory }}
                  file_id: "${{ secrets.BETA_MOD_ID }}"
                  username: "${{ secrets.STEAM_USERNAME }}"
                  password: "${{ secrets.STEAM_PASSWORD }}"
                  otp: "${{ steps.generate.outputs.code }}"
                  path: "${{ github.workspace }}/releases/@rtf42"
                  name: "rtf42"
                  change_notes_title: "${{ github.event.release.name }}"
                  change_notes: "${{ github.event.release.body }}"
              continue-on-error: true

            - name: PR to merge version to main branch
              uses: peter-evans/create-pull-request@v5
              with:
                token: ${{ secrets.GITHUB_TOKEN }}
                commit-message: "Update version to ${{ env.VERSION }}"
                title: "Update version to ${{ env.VERSION }}"
                body: "Update version to ${{ env.VERSION }}"
                branch: "version-${{ env.VERSION }}"
                base: "main"
                branch-suffix: random
                delete-branch: true
                labels: |
                    automerge
                    automated pr
                path: addons

